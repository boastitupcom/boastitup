# 🚀 Tech Story: Brand Health Dashboard - Complete Interactive Experience

## 📌 Feature Name
Brand Health Dashboard: Interactive Overview & Action Management System

## 🎯 Introduction
A unified, interactive dashboard that provides comprehensive brand performance monitoring with AI-powered insights and full action management capabilities. This dashboard combines real-time scoring, intelligent recommendations, and complete action lifecycle management to empower marketing teams with data-driven decision making and execution tracking.

Business Outcome: Reduce brand monitoring time by 80%, increase response speed to brand issues by 300%, achieve 95% action completion rate through structured workflow management, and provide measurable ROI tracking on brand improvement initiatives.

## ❗ Problem Statement
Marketing teams currently struggle with:

**Fragmented Data**: Brand metrics scattered across 5+ platforms requiring manual aggregation (10+ hours/week)

**Reactive Monitoring**: Issues discovered days/weeks after they occur, causing 40% more reputation damage

**Unclear Priorities**: No unified scoring system to determine which brand issues need immediate attention

**Action Paralysis**: 60% of identified opportunities go unaddressed due to lack of structured execution

**No Progress Tracking**: Teams can't measure the impact of actions taken on brand health improvements

**Siloed Execution**: Actions aren't connected to broader business objectives or campaign strategies

## ✅ Solution Overview
High-level Architecture: Next.js 15 + Supabase + shadcn/ui + Zustand + React Query + Chart.js

Key Principles:

- **Multi-tenant Architecture**: Secure tenant isolation with RLS policies
- **Modular UI System**: Reusable components for consistent UX
- **AI-Powered Insights**: Automated analysis with confidence scoring and recommended actions
- **Full Action Management**: Complete lifecycle from insight generation to execution tracking
- **Integration Ready**: Built-in connections to OKR systems and campaign management

## 🛠️ Technical Architecture

### Data Layer
**Primary Tables/Views**: The dashboard will primarily interact with three key database views:

- `v_brand_health_scores`: Calculates the overall brand health score for a given brand_id and tenant_id.
- `ai_insights_v1`: Core insight data storage insight_category, insight_title, priority_display, insight_description, confidence_score, impact_score, and days_old.
- `ai_recommended_actions_v1`: Action management and state tracking, including action_description, action_priority, insight_id, action_confidence_score, action_impact_score, and stage.

**Key Relationships**: Data relationships are critical for correct filtering and joins.

- brands.id is linked to v_brand_health_scores.brand_id and brand_insights_dashboard.brand_id.
- tenants.id is linked to v_ai_insights_enriched.tenant_id.

#### ai_insights_v1 - Core insight data storage

```sql
ai_insights_v1:
  - id, tenant_id, brand_id
  - insight_category, insight_title (optional), insight_description
  - confidence_score, impact_score
  - trend_change_text, trend_direction (numeric: 1=up, 0=neutral, -1=down)
  - platform, is_active
  - created_at, expires_at
```

**Detailed SQL ai_insights_v1**

```sql
create table public.ai_insights_v1 (
  id uuid not null default gen_random_uuid (),
  tenant_id uuid not null,
  brand_id uuid not null,
  date_id integer null,
  name character varying(50) not null,
  insight_type character varying(50) not null,
  insight_category character varying(50) not null,
  insight_title character varying(255) not null,
  insight_description text not null,
  platform public.platform_enum null,
  confidence_score numeric(3, 2) null,
  impact_score integer null,
  percentage_change numeric null,
  is_active boolean not null default true,
  created_at timestamp with time zone not null default now(),
  expires_at timestamp with time zone null,
  priority_display character varying null,
  trend_change_text character varying null,
  trend_direction numeric null default '1'::numeric,
  sort_order smallint null,
  constraint ai_insights_v1_pkey primary key (id),
  constraint ai_insights_v1_brand_fkey foreign KEY (brand_id) references brands (id),
  constraint ai_insights_v1_date_fkey foreign KEY (date_id) references dim_date_v1 (date_id),
  constraint ai_insights_v1_tenant_fkey foreign KEY (tenant_id) references tenants (id)
) TABLESPACE pg_default;
```

#### ai_recommended_actions_v1 - Action management and state tracking

```sql
ai_recommended_actions_v1:
  - id, insight_id
  - action_description, action_priority
  - confidence_score, impact_score
  - stage (new/viewed/saved/actioned)
  - viewed_at/by, saved_at/by, actioned_at/by
  - okr_objective_id, assigned_to_campaign_id
  - created_at, expires_at
```

**Detailed SQL - ai_recommended_actions_v1**

```sql
create table public.ai_recommended_actions_v1 (
  id uuid not null default gen_random_uuid (),
  insight_id uuid not null,
  action_text text not null,
  action_priority character varying(20) not null,
  action_description text null,
  stage character varying(30) not null default 'new'::character varying,
  viewed_at timestamp with time zone null,
  viewed_by uuid null,
  saved_at timestamp with time zone null,
  saved_by uuid null,
  actioned_at timestamp with time zone null,
  actioned_by uuid null,
  assigned_to_campaign_id uuid null,
  created_at timestamp with time zone not null default now(),
  okr_objective_id uuid null,
  action_confidence_score numeric(3, 2) null,
  action_impact_score integer null,
  constraint ai_recommended_actions_v1_pkey primary key (id),
  constraint ai_recommended_actions_v1_insight_fkey foreign KEY (insight_id) references ai_insights_v1 (id) on delete CASCADE,
  constraint ai_recommended_actions_v1_okr_objective_id_fkey foreign KEY (okr_objective_id) references okr_objectives (id),
  constraint ai_recommended_actions_v1_actioned_by_fkey foreign KEY (actioned_by) references auth.users (id),
  constraint ai_recommended_actions_v1_saved_by_fkey foreign KEY (saved_by) references auth.users (id),
  constraint ai_recommended_actions_v1_viewed_by_fkey foreign KEY (viewed_by) references auth.users (id),
  constraint ai_recommended_actions_v1_stage_check check (
    (
      (stage)::text = any (
        array[
          'new'::text,
          'viewed'::text,
          'saved'::text,
          'selected_for_action'::text,
          'in_progress'::text,
          'actioned'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;
```

**Key Relationships:**

- ai_insights_v1.brand_id → brands.id
- ai_insights_v1.tenant_id → tenants.id  
- ai_recommended_actions_v1.insight_id → ai_insights_v1.id

### API Layer Architecture

**Service Classes**: A centralized BrandHealthService Centralized service architecture for all dashboard operations:

```javascript
export const BrandHealthService = {
  // Fetch brand score (if using view)
  fetchBrandScore: async (brandId: string, tenantId: string) => {
    const { data, error } = await supabase
      .from('v_brand_health_scores')
      .select('brand_health_score, calculation_date')
      .eq('brand_id', brandId)
      .eq('tenant_id', tenantId)
      .single();
    if (error) throw error;
    return data;
  },
  // Fetch insights with actions
  fetchInsightsWithActions: async (brandId: string, tenantId: string) => {
    const { data, error } = await supabase
      .from('ai_insights_v1')
      .select(`
        *,
        ai_recommended_actions_v1(*)
      `)
      .eq('brand_id', brandId)
      .eq('tenant_id', tenantId)
      .eq('is_active', true)
      .order('impact_score', { ascending: false });
    if (error) throw error;
    return data;
  },
  // Simple stage update
  updateActionStage: async (actionId: string, stage: string, userId: string) => {
    const updates: any = { stage };
    // Add timestamp based on stage
    if (stage === 'viewed') {
      updates.viewed_at = new Date().toISOString();
      updates.viewed_by = userId;
    } else if (stage === 'saved') {
      updates.saved_at = new Date().toISOString();
      updates.saved_by = userId;
    } else if (stage === 'actioned') {
      updates.actioned_at = new Date().toISOString();
      updates.actioned_by = userId;
    }
    const { data, error } = await supabase
      .from('ai_recommended_actions_v1')
      .update(updates)
      .eq('id', actionId)
      .select()
      .single();
    if (error) throw error;
    return data;
  }
};
```

**Caching Strategy**: TanStack Query will be used for caching, with a staleTime of 0 to ensure a fresh fetch on every page load. The manual refresh button will use queryClient.invalidateQueries to bypass the cache and trigger a new fetch.

**Real-time Updates**: Real-time subscriptions are not needed in this version. Instead, a "Last Refreshed" timestamp and a manual refresh button will be implemented.

## Brand Health Dashboard - Detailed File Structure

```
apps/web/app/workspace/brand-health/
├── dashboard/
│   ├── page.tsx
apps/web/components/brand-health/
│       ├── BrandScoreCard.tsx
│       ├── InsightCard.tsx
│       └── ActionItem.tsx
├── loading.tsx
└── error.tsx
packages/hooks/src/brand-health/
├── api/
│   ├── useInsights.ts
│   └── useUpdateAction.ts
└── types/
    └── brand-health.types.ts
```

## Core UI Components (Built with shadcn/ui principles)

### Dynamic Grid Layout Changes:

**Card Creation Logic:**
- One card per unique insight_category
- Number of cards = Number of unique categories in the data
- All insights with the same category are grouped together in one card

**Dynamic Grid Rules (Desktop):**

| Unique Categories | Grid Layout | Visual |
|-------------------|-------------|--------|
| 1-2 categories | 1x2 layout | [📊][📊] |
| 3-4 categories | 2x2 layout | [📊][📊]<br>[📊][📊] |
| 5-6 categories | 2x3 layout | [📊][📊]<br>[📊][📊]<br>[📊][📊] |
| 7-8 categories | 2x4 layout | [📊][📊]<br>[📊][📊]<br>[📊][📊]<br>[📊][📊] |
| 9+ categories | 3x3+ layout | Wraps to next row |

**Dynamic Grid Layout - Implementation Details:**
- **Data Grouping**: insightsByCategory groups all insights by their category
- **Grid Detection**: getGridCols() function determines appropriate grid class
- **Component Structure:**
  - BrandHealthDashboard - Main orchestrator
  - CategoryCard - One per unique category
  - InsightItem - Individual insights within each category

### 1. Left Panel – Brand Health Score Card
`<BrandScoreCard />`

**Data Binding**: brand_health_score from Supabase query.

**UI Components:**
- Circular Progress Ring (binds to brand_health_score)
- Score shown in % with large text.
- Background: gradient (from-indigo-600 to-indigo-800).
- Header: "Overall Brand Health Score" (static text, reusable across brands).
- Props for Config: score, color, label → dynamic input.

**Purpose**: A circular progress indicator to display the overall brand health score.

**Props Interface:**

```typescript
interface BrandScoreCardProps {
  score: number; // 0-100
  previousScore?: number;
  isLoading?: boolean;
  size?: 'sm' | 'md' | 'lg';
  showTrend?: boolean;
}
```

**AC:**
- Displays a circular progress ring with an animated filling.
- The score is shown as a large percentage.
- The color of the ring changes based on the score: Green (80+), Yellow (50-79), and Red (<50).
- Shows trend if previousScore provided

**TC:**
- Test Case: score prop is 85. Expected Outcome: The ring renders in Green.
- Test Case: isLoading prop is true. Expected Outcome: A skeleton loader is displayed.

### 2. Top Right – Section Container (e.g. Awareness)
`<InsightCard />`

**Purpose**: To display a categorized list of brand metrics with visual indicators.

**UI Example from Image 1 - AWARENESS Category Card:**
```
AWARENESS (Blue header with white dot icon)
├── Branded Search Volume: ~5,000
│   ├── Description: "5,000 monthly searches with strong growth momentum"
│   ├── Priority Badge: "HIGH" (red background)
│   ├── Confidence Bar: 85% (blue progress bar)
│   ├── Impact: "High" (red text)
│   └── Timestamp: "Today" with green trend arrow
│
├── AI Suggested Actions (collapsible section with chevron)
│   ├── Action 1: "Implement aggressive content marketing (target 2M impressions)"
│   │   ├── Priority: "High" (red badge) + "New" (blue badge)
│   │   ├── Confidence: 85% (blue progress bar)
│   │   ├── Impact: "High" (red text)
│   │   ├── Checkbox: "Select for Action"
│   │   ├── Timestamp: "Today"
│   │   └── Action menu: Star icon + three dots menu
│   │
│   └── Action 2: "Launch comprehensive content strategy targeting 2M monthly impressions"
│       ├── Priority: "High" (red badge) + "New" (blue badge)
│       ├── Confidence: 70% (blue progress bar)
│       ├── Impact: "High" (red text)
│       ├── Checkbox: "Select for Action"
│       ├── Timestamp: "Today"
│       └── Action menu: Star icon + three dots menu
│
└── Social Media Reach: ~14,000 followers (3.2% engagement)
    ├── Description: "Instagram following shows moderate engagement with room for growth"
    ├── Priority Badge: "MEDIUM" (orange background)
    ├── Confidence Bar: 75% (blue progress bar)
    ├── Impact: "Medium" (orange text)
    ├── Timestamp: "Yesterday" with green trend arrow
    │
    └── AI Suggested Actions (collapsible section)
        └── Action: "Launch micro-influencer partnership program (50+ fitness enthusiasts)"
            ├── Priority: "Medium" (orange badge) + "Viewed" (gray badge)
            ├── Confidence: 70% (blue progress bar)
            ├── Impact: "Medium" (orange text)
            ├── Checkbox: "Select for Action"
            ├── Timestamp: "Today"
            └── Action menu: Star icon + three dots menu
```

**UI Example from Image 2 - CONSIDERATION Category Card:**
```
Consideration (Gray/neutral header)
├── Competitive Preference Ranking: 8th in women's activewear consideration
│   └── Gap indicator: "(24% gap to #3)" in orange text
│
├── Search Behavior: 85% generic terms, 15% branded
│   └── Warning: "- Low brand recall" in red text
│
└── Key Association: "Affordable quality" (23%)
```

**Props Interface:**

```typescript
interface InsightCardProps {
  insight: {
    id: string;
    insight_category: string;
    insight_title: string;
    insight_description: string;
    confidence_score: number;
    impact_score: number;
    trend_change_text?: string; // "+120% YoY"
    trend_direction?: number; // 1=up, 0=neutral, -1=down
    created_at: string;
    expires_at?: string;
    actions: ActionItem[];
  };
  onActionClick: (actionId: string) => void;
}
```

**AC:**
- The header displays a dynamic icon based on the category.
- Collapsible action list
- Real-time action count badges
- Priority and confidence indicators
- Expiration warnings
- Each insight item displays a title, value, and a status badge (e.g., "Good", "At Risk").
- The card's theme color should match the category: Blue for Awareness, Green for Consideration, and Purple for Trust & Credibility.

**TC:**
- Test Case: category is 'Awareness'. Expected Outcome: The card uses a Blue theme (#2563EB).
- Test Case: insight_status is 'Declining'. Expected Outcome: A "At Risk" badge is displayed.

**Data Binding**: Flexible via category field (e.g. "awareness", "consideration", "reputation").

**UI Components:**
- Header with Icon: dynamic icon mapping → icon_map[metric_type].
- Metrics List: Array of {insight_title, insight_text, metric_value?} objects.
- Example:
  - Branded Search Volume: 5000
  - Social Reach: 14,000 (3.2% engagement)
- Competitor Comparison Block: Supabase relation table → competitor_metrics
- Show competitor_name, value, and highlight gaps.

### ✅ Field-to-UI Mapping Insight Card

| View Column | UI Component / Behaviour |
|-------------|-------------------------|
| insight_category | Section header (e.g., "Awareness") |
| insight_title | e.g. Branded Search Volume |
| insight_description | e.g. ~ 5000 Monthly Search |
| confidence_score | Confidence bar (0-100%) |
| impact_score | Priority indicator |
| trend_change_text | Trend badge text ("+120% YoY") |
| trend_direction | Arrow icon & color (1=green↑, 0=yellow→, -1=red↓) |
| created_at | Calculate "X days ago" |
| expires_at | Show "Expires in X days" warning |
| sort_order | Controls order of metrics in UI |

### 3. AIActionCard

**Purpose**: To display AI-powered insights and recommendations in an interactive card format.

**Props Interface:**

```typescript
interface ActionItemProps {
  action: {
    id: string;
    action_description: string;
    action_priority: 'high' | 'medium' | 'low';
    confidence_score: number;
    impact_score: number;
    stage: 'new' | 'viewed' | 'saved' | 'actioned';
    expires_at?: string;
  };
  onStageChange: (actionId: string, newStage: string) => void;
}
```

**AC:**
- Displays the insight title, description, and status badge.
- Renders a confidence bar that corresponds to the confidenceScore.
- Highlights urgent actions with a specific red icon or "Urgent" label if requires_immediate_action is true.
- Interactive stage management
- Save/bookmark functionality
- Assignment tracking
- Progress indicators
- Context menu for advanced actions

**TC:**
- Test Case: confidenceScore is 95. Expected Outcome: The confidence bar is nearly full.
- Test Case: priority is 'HIGH'. Expected Outcome: The card is sorted higher in the UI (due to composite_score sorting) and a clear priority tag is visible.

### ✅ Field-to-UI Mapping Insight Suggested Actions Card

| DB Field | UI Component |
|----------|--------------|
| action_description | Action text |
| action_priority | Priority badge color |
| confidence_score | Numeric → Progress Bar (%) |
| impact_score | Enum → "High" (red), "Medium" (orange), "Low" (green) |
| stage | Status Badge → "New", "Viewed", "In Progress", "Actioned" |
| expires_at | Show "Expiring in X days" or "Expired" label |

### 4. ActionContextMenu

**Purpose**: Dropdown menu for action management operations

```typescript
interface ActionContextMenuProps {
  actionId: string;
  currentStage: ActionStage;
  isAssignedToOKR: boolean;
  isAssignedToCampaign: boolean;
  onStageChange: (stage: ActionStage) => void;
  onLinkToOKR: () => void;
  onAssignToCampaign: () => void;
  onRemoveAssignments: () => void;
}
```

**Menu Options:**
- Select for Action
- Mark In Progress
- Mark as Completed
- Link to OKR Objective
- Assign to Campaign
- Remove from Current Assignment

## 🗃️ State Management

### Global Zustand Store

```typescript
interface BrandHealthStore {
  selectedBrandId: string | null;
  activeCategory: string | null;
  filters: {
    priority: string[];
    showExpiring: boolean;
  };
  setSelectedBrand: (brandId: string) => void;
  setActiveCategory: (category: string) => void;
  updateFilters: (filters: Partial<Filters>) => void;
}
```

### React Query Integration

```typescript
export const useInsights = (brandId: string, tenantId: string) => {
  return useQuery({
    queryKey: ['insights', brandId, tenantId],
    queryFn: () => BrandHealthService.fetchInsightsWithActions(brandId, tenantId),
    staleTime: 5 * 60 * 1000, // 5 minutes
    enabled: !!brandId && !!tenantId
  });
};

export const useUpdateAction = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ actionId, stage, userId }) => 
      BrandHealthService.updateActionStage(actionId, stage, userId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['insights'] });
    }
  });
};
```

## 🔄 Action Management Workflows

### Action Lifecycle States

```typescript
type ActionStage = 
  | 'new'                 // Freshly generated
  | 'viewed'              // User has seen the action
  | 'saved'               // User has bookmarked
  | 'selected_for_action' // Selected for execution
  | 'in_progress'         // Currently being worked on
  | 'actioned'            // Completed
  | 'dismissed';          // User dismissed as not relevant
```

### Stage Transition Rules

```typescript
const stageTransitions: Record<ActionStage, ActionStage[]> = {
  'new': ['viewed', 'saved', 'selected_for_action', 'dismissed'],
  'viewed': ['saved', 'selected_for_action', 'dismissed'],
  'saved': ['selected_for_action', 'dismissed'],
  'selected_for_action': ['in_progress', 'saved', 'dismissed'],
  'in_progress': ['actioned', 'selected_for_action'],
  'actioned': [], // Terminal state
  'dismissed': ['new'] // Can be undismissed
};
```

## 🧮 Business Logic & Validation

**Score Calculation:** Part of Supabase Flow

**Validation Schemas:**

```typescript
const actionUpdateSchema = z.object({
  actionId: z.string().uuid(),
  stage: z.enum(['new', 'viewed', 'saved', 'actioned']),
  userId: z.string().uuid()
});

const insightFilterSchema = z.object({
  category: z.enum(['awareness', 'consideration', 'trust']).optional(),
  minImpactScore: z.number().min(0).max(100).optional(),
  isActive: z.boolean().optional()
});
```

## Performance & Optimization Specs

- **Loading States**: Skeleton loaders will be used for all components during initial data fetch.
- **Caching**: Caching is not used for this version as staleTime is set to 0.
- **Code Splitting**: Dynamic imports will be used for insight detail modals.
- **Responsive Design:**
  - Desktop (≥1280px): 2-column insight layout.
  - Tablet (768px-1279px): 2-column layout.
  - Mobile (<768px): Single column with stacked cards.

## 🔒 Multi-Tenancy & Security

**Data Isolation**: All queries must include a filter on the tenant_id column. Supabase's RLS policies will enforce this at the database level, ensuring users can only see their own data.

## ❌ Error Handling

- **Network Errors**: An API fetch error will trigger a retry mechanism with exponential backoff for a maximum of three attempts.
- **Data Validation**: Zod schemas will be used to validate API responses.
- **Permission Errors**: A clear "Permission Denied" message will be displayed if a user attempts to access unauthorized data.
- **Stale Data**: A "Last Refreshed" timestamp and a manual refresh button will be used instead of a stale data visual indicator.

## 🧭 Navigation & User Flow

```typescript
const navigationStructure = [
  { label: 'Dashboard', href: '/workspace/brand-health/dashboard', icon: 'BarChart3' },
];
```

**User Flow:**
1. **Dashboard Load**: The user logs in and navigates to /workspace/brand-health/dashboard.
2. **Data Fetching**: The useBrandHealthScore and useAIInsights hooks fetch data from Supabase.
3. **UI Render**: The dashboard renders with all the data, displaying the score card, categorized metrics, and AI insights.
4. **Manual Refresh**: The user can click the "Refresh" button at any time to manually refetch the latest data from the database. A "Last Refreshed" timestamp will update accordingly.



brand_health_score : 
create view public.v_brand_health_scores as
select
  gen_random_uuid () as id,
  b.id as brand_id,
  b.tenant_id,
  CURRENT_DATE as calculation_date,
  calculate_sentiment_score (
    b.id,
    CURRENT_DATE,
    cfg.min_mentions_for_sentiment
  ) as sentiment_score,
  calculate_engagement_rate_score (b.id, CURRENT_DATE, cfg.lookback_days) as engagement_rate_score,
  calculate_reach_score (b.id, CURRENT_DATE, cfg.lookback_days) as reach_score,
  calculate_mentions_velocity_score (b.id, CURRENT_DATE) as mentions_velocity_score,
  (
    select
      COALESCE(
        (
          upm.total_comments + upm.total_likes + upm.total_shares + upm.total_saves
        )::numeric,
        0::numeric
      ) as "coalesce"
    from
      unified_performance_metrics upm
    where
      upm.brand_id = b.id
      and upm.metric_date = CURRENT_DATE
    limit
      1
  ) as engagement_volume_score,
  COALESCE(
    calculate_sentiment_score (
      b.id,
      CURRENT_DATE,
      cfg.min_mentions_for_sentiment
    ),
    0::numeric
  ) * (cfg.sentiment_weight / 100.0) + COALESCE(
    calculate_engagement_rate_score (b.id, CURRENT_DATE, cfg.lookback_days),
    0::numeric
  ) * (cfg.engagement_rate_weight / 100.0) + COALESCE(
    calculate_reach_score (b.id, CURRENT_DATE, cfg.lookback_days),
    0::numeric
  ) * (cfg.reach_weight / 100.0) + COALESCE(
    calculate_mentions_velocity_score (b.id, CURRENT_DATE),
    0::numeric
  ) * (cfg.mentions_velocity_weight / 100.0) + COALESCE(
    (
      select
        (
          upm.total_comments + upm.total_likes + upm.total_shares + upm.total_saves
        )::numeric as "numeric"
      from
        unified_performance_metrics upm
      where
        upm.brand_id = b.id
        and upm.metric_date = CURRENT_DATE
      limit
        1
    ),
    0::numeric
  ) * (cfg.engagement_volume_weight / 100.0) as brand_health_score,
  5 as components_calculated,
  '{}'::jsonb as calculation_metadata,
  now() as created_at
from
  brands b
  join brand_health_config cfg on cfg.brand_id = b.id
  and cfg.tenant_id = b.tenant_id
  and cfg.is_active = true;

  v_generated_insights:
  create view public.v_generated_insights as
with
  metric_with_comparisons as (
    select
      fmv.metric_type,
      fmv.platform,
      fmv.brand_id,
      fmv.tenant_id,
      fmv.value as current_value,
      fmv.date_id,
      lag(fmv.value) over (
        partition by
          fmv.metric_type,
          fmv.platform,
          fmv.brand_id
        order by
          fmv.date_id
      ) as previous_year_value,
      case
        when lag(fmv.value) over (
          partition by
            fmv.metric_type,
            fmv.platform,
            fmv.brand_id
          order by
            fmv.date_id
        ) > 0::numeric then round(
          (
            fmv.value - lag(fmv.value) over (
              partition by
                fmv.metric_type,
                fmv.platform,
                fmv.brand_id
              order by
                fmv.date_id
            )
          ) / lag(fmv.value) over (
            partition by
              fmv.metric_type,
              fmv.platform,
              fmv.brand_id
            order by
              fmv.date_id
          ) * 100::numeric,
          1
        )
        else 0::numeric
      end as yoy_change_percent
    from
      fact_metric_value_v1 fmv
    where
      fmv.date_id = (
        (
          select
            max(fact_metric_value_v1.date_id) as max
          from
            fact_metric_value_v1
        )
      )
  ),
  formatted_insights as (
    select
      mwc.metric_type,
      mwc.platform,
      mwc.brand_id,
      mwc.tenant_id,
      mwc.current_value,
      mwc.date_id,
      mwc.previous_year_value,
      mwc.yoy_change_percent,
      isc.category,
      isc.insight_title_template as insight_title,
      case isc.value_format_type
        when 'abbreviated'::text then case
          when mwc.current_value >= 1000000::numeric then round(mwc.current_value / 1000000.0, 1) || 'M'::text
          when mwc.current_value >= 1000::numeric then round(mwc.current_value / 1000.0, 1) || 'K'::text
          else mwc.current_value::text
        end
        when 'currency'::text then '$'::text || to_char(mwc.current_value, 'FM999,999,999'::text)
        when 'percentage'::text then round(mwc.current_value, isc.decimal_places) || '%'::text
        else round(mwc.current_value, isc.decimal_places)::text
      end as formatted_value,
      case
        when mwc.current_value >= COALESCE(
          ((isc.status_thresholds ->> 'good'::text)::jsonb) ->> 'min'::text,
          '0'::text
        )::numeric then 'Good'::text
        when mwc.current_value <= COALESCE(
          (
            (isc.status_thresholds ->> 'critical'::text)::jsonb
          ) ->> 'max'::text,
          '0'::text
        )::numeric then 'Critical'::text
        else 'Needs Attention'::text
      end as insight_status,
      replace(
        replace(
          replace(
            replace(
              replace(
                isc.insight_text_template,
                '{insight_title}'::text,
                isc.insight_title_template::text
              ),
              '{formatted_value}'::text,
              case isc.value_format_type
                when 'abbreviated'::text then case
                  when mwc.current_value >= 1000000::numeric then round(mwc.current_value / 1000000.0, 1) || 'M'::text
                  when mwc.current_value >= 1000::numeric then round(mwc.current_value / 1000.0, 1) || 'K'::text
                  else mwc.current_value::text
                end
                when 'currency'::text then '$'::text || to_char(mwc.current_value, 'FM999,999,999'::text)
                else round(mwc.current_value, isc.decimal_places)::text
              end
            ),
            '{unit}'::text,
            isc.value_unit::text
          ),
          '{yoy_change}'::text,
          COALESCE(mwc.yoy_change_percent::text, '0'::text)
        ),
        '{change_indicator}'::text,
        case
          when COALESCE(mwc.yoy_change_percent, 0::numeric) > 0::numeric then '+'::text
          when COALESCE(mwc.yoy_change_percent, 0::numeric) < 0::numeric then ''::text
          else ''::text
        end
      ) as insight_text,
      isc.display_order
    from
      metric_with_comparisons mwc
      join insight_statement_config isc on mwc.metric_type = isc.metric_type
      and (
        isc.platform is null
        or mwc.platform = isc.platform
      )
      and isc.is_active = true
  )
select
  brand_id,
  tenant_id,
  category,
  insight_title,
  insight_text,
  current_value as metric_value,
  insight_status,
  yoy_change_percent,
  display_order
from
  formatted_insights
order by
  category,
  display_order,
  insight_title;

  v_ai_insights_enriched:
  create view public.v_ai_insights_enriched as
select
  ai.id,
  ai.tenant_id,
  ai.brand_id,
  ai.date_id,
  ai.okr_objective_id,
  b.name,
  d.date,
  ai.insight_type,
  ai.insight_category,
  ai.insight_title,
  ai.insight_description,
  ai.platform,
  ai.confidence_score,
  ai.impact_score,
  case
    when ai.impact_score >= 8
    and ai.confidence_score >= 0.8 then 'CRITICAL PRIORITY'::text
    when ai.impact_score >= 8 then 'HIGH PRIORITY'::text
    when ai.impact_score >= 6 then 'MEDIUM PRIORITY'::text
    else 'LOW PRIORITY'::text
  end as priority_display,
  concat(
    round(ai.confidence_score * 100::numeric),
    '% confidence'
  ) as confidence_display,
  case
    when ai.percentage_change > 20::numeric then '↑↑'::text
    when ai.percentage_change > 0::numeric then '↑'::text
    when ai.percentage_change < '-20'::integer::numeric then '↓↓'::text
    when ai.percentage_change < 0::numeric then '↓'::text
    else '→'::text
  end as trend_indicator,
  ai.recommended_actions,
  ai.data_points,
  jsonb_array_length(ai.recommended_actions) as action_count,
  ai.recommended_actions -> 0 as top_action,
  ai.stage,
  case ai.stage
    when 'new'::text then 'New Insight'::text
    when 'viewed'::text then 'Viewed'::text
    when 'saved'::text then 'Saved for Later'::text
    when 'selected_for_action'::text then 'Selected'::text
    when 'in_progress'::text then 'In Progress'::text
    when 'actioned'::text then 'Completed'::text
    else null::text
  end as stage_display,
  ai.viewed_at,
  ai.viewed_by,
  uv.email as viewed_by_email,
  ai.saved_at,
  ai.saved_by,
  us.email as saved_by_email,
  ai.actioned_at,
  ai.actioned_by,
  ua.email as actioned_by_email,
  ai.created_at,
  ai.expires_at,
  EXTRACT(
    day
    from
      now() - ai.created_at
  ) as days_old,
  case
    when ai.created_at > (now() - '1 day'::interval) then 'Today'::text
    when ai.created_at > (now() - '7 days'::interval) then 'This Week'::text
    when ai.created_at > (now() - '30 days'::interval) then 'This Month'::text
    else 'Older'::text
  end as age_group,
  case
    when ai.expires_at is null then 'No Expiry'::text
    when ai.expires_at > now() then 'Active'::text
    else 'Expired'::text
  end as expiry_status,
  case
    when ai.expires_at is not null then EXTRACT(
      day
      from
        ai.expires_at - now()
    )
    else null::numeric
  end as days_until_expiry,
  ai.impact_score::numeric * COALESCE(ai.confidence_score, 0.5) * 10::numeric as composite_score,
  case
    when ai.stage::text = 'actioned'::text then 'Completed'::text
    when ai.stage::text = 'selected_for_action'::text then 'Selected for Action'::text
    when ai.stage::text = 'in_progress'::text then 'In Progress'::text
    when ai.saved_at is not null then 'Saved'::text
    when ai.viewed_at is not null then 'Viewed'::text
    else 'Unread'::text
  end as action_status,
  case
    when (
      ai.expires_at is null
      or ai.expires_at > now()
    )
    and ai.stage::text <> 'actioned'::text then true
    else false
  end as is_active,
  case
    when ai.impact_score >= 8
    and (
      ai.stage::text = any (
        array[
          'new'::character varying,
          'viewed'::character varying
        ]::text[]
      )
    )
    and (
      ai.expires_at is null
      or ai.expires_at > now()
    ) then true
    else false
  end as requires_immediate_action
from
  ai_insights ai
  left join brands b on ai.brand_id = b.id
  left join dim_date_v1 d on ai.date_id = d.date_id
  left join auth.users uv on ai.viewed_by = uv.id
  left join auth.users us on ai.saved_by = us.id
  left join auth.users ua on ai.actioned_by = ua.id;

  ai_insights
  create table public.ai_insights (
  id uuid not null default gen_random_uuid (),
  tenant_id uuid not null,
  brand_id uuid not null,
  date_id integer null,
  insight_type character varying(50) not null,
  insight_category character varying(50) not null,
  insight_title character varying(255) not null,
  insight_description text not null,
  confidence_score numeric(3, 2) null,
  impact_score integer null,
  recommended_actions jsonb null default '[]'::jsonb,
  data_points jsonb null default '{}'::jsonb,
  platform character varying(50) null,
  baseline_value numeric null,
  current_value numeric null,
  percentage_change numeric null,
  stage character varying(30) not null default 'new'::character varying,
  viewed_at timestamp with time zone null,
  viewed_by uuid null,
  saved_at timestamp with time zone null,
  saved_by uuid null,
  actioned_at timestamp with time zone null,
  actioned_by uuid null,
  created_at timestamp with time zone null default now(),
  expires_at timestamp with time zone null,
  okr_objective_id uuid null,
  constraint ai_insights_pkey primary key (id),
  constraint ai_insights_brand_fkey foreign KEY (brand_id) references brands (id),
  constraint ai_insights_date_fkey foreign KEY (date_id) references dim_date_v1 (date_id),
  constraint ai_insights_viewed_by_fkey foreign KEY (viewed_by) references auth.users (id),
  constraint ai_insights_saved_by_fkey foreign KEY (saved_by) references auth.users (id),
  constraint ai_insights_tenant_fkey foreign KEY (tenant_id) references tenants (id),
  constraint ai_insights_actioned_by_fkey foreign KEY (actioned_by) references auth.users (id),
  constraint ai_insights_okr_fkey foreign KEY (okr_objective_id) references okr_objectives (id),
  constraint ai_insights_impact_check check (
    (
      (impact_score >= 1)
      and (impact_score <= 10)
    )
  ),
  constraint ai_insights_stage_check check (
    (
      (stage)::text = any (
        (
          array[
            'new'::character varying,
            'viewed'::character varying,
            'saved'::character varying,
            'selected_for_action'::character varying,
            'in_progress'::character varying,
            'actioned'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint ai_insights_confidence_check check (
    (
      (confidence_score >= (0)::numeric)
      and (confidence_score <= (1)::numeric)
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_ai_insights_tenant_brand on public.ai_insights using btree (tenant_id, brand_id) TABLESPACE pg_default;

create index IF not exists idx_ai_insights_date on public.ai_insights using btree (date_id) TABLESPACE pg_default;

create index IF not exists idx_ai_insights_stage on public.ai_insights using btree (stage) TABLESPACE pg_default;

create index IF not exists idx_ai_insights_platform on public.ai_insights using btree (platform) TABLESPACE pg_default;

create index IF not exists idx_ai_insights_category on public.ai_insights using btree (insight_category) TABLESPACE pg_default;

create index IF not exists idx_ai_insights_created on public.ai_insights using btree (created_at desc) TABLESPACE pg_default;

create index IF not exists idx_ai_insights_impact on public.ai_insights using btree (impact_score desc) TABLESPACE pg_default;

brands:
create table public.brands (
  id uuid not null default gen_random_uuid (),
  tenant_id uuid not null,
  name character varying(255) not null,
  slug character varying(100) not null,
  description text null,
  logo_url text null,
  brand_colors jsonb null default '{}'::jsonb,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  primary_domain character varying(255) null,
  industry_id uuid null,
  constraint brands_pkey primary key (id),
  constraint brands_tenant_id_slug_key unique (tenant_id, slug),
  constraint brands_industry_id_fkey foreign KEY (industry_id) references industries (id),
  constraint brands_tenant_id_fkey foreign KEY (tenant_id) references tenants (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_brands_tenant_id on public.brands using btree (tenant_id) TABLESPACE pg_default;

create index IF not exists idx_brands_slug on public.brands using btree (tenant_id, slug) TABLESPACE pg_default;

create index IF not exists idx_brands_is_active on public.brands using btree (tenant_id, is_active) TABLESPACE pg_default;

tenants:
create table public.tenants (
  id uuid not null default extensions.uuid_generate_v4 (),
  name character varying(255) not null,
  slug character varying(100) not null,
  description text null,
  settings jsonb null default '{}'::jsonb,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint tenants_pkey primary key (id),
  constraint tenants_slug_key unique (slug)
) TABLESPACE pg_default;

create index IF not exists idx_tenants_slug on public.tenants using btree (slug) TABLESPACE pg_default;

dim_date_v1:
create table public.dim_date_v1 (
  date_id integer not null,
  date date not null,
  week_start date not null,
  week_id integer not null,
  month_id integer not null,
  quarter_id integer not null,
  year integer not null,
  month integer not null,
  quarter integer not null,
  is_business_day boolean not null default true,
  day_of_week integer not null,
  day_name character varying(10) not null,
  month_name character varying(20) not null,
  quarter_name character varying(10) not null,
  fiscal_year integer null,
  fiscal_quarter integer null,
  is_weekend boolean not null default false,
  is_holiday boolean not null default false,
  holiday_name character varying(100) null,
  days_from_today integer null,
  created_at timestamp with time zone null default now(),
  constraint dim_date_v1_pkey primary key (date_id),
  constraint dim_date_date_v1_key unique (date),
  constraint dim_date_v1_id_format check (
    (
      (date_id >= 19000101)
      and (date_id <= 99991231)
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_dim_date_v1_is_business_day on public.dim_date_v1 using btree (is_business_day) TABLESPACE pg_default;

create index IF not exists idx_dim_date_v1_fiscal_year_quarter on public.dim_date_v1 using btree (fiscal_year, fiscal_quarter) TABLESPACE pg_default;

create index IF not exists idx_dim_date_v1_week_id on public.dim_date_v1 using btree (week_id) TABLESPACE pg_default;

create index IF not exists idx_dim_date_v1_month_id on public.dim_date_v1 using btree (month_id) TABLESPACE pg_default;

create index IF not exists idx_dim_date_v1_quarter_id on public.dim_date_v1 using btree (quarter_id) TABLESPACE pg_default;

create index IF not exists idx_dim_date_v1_year on public.dim_date_v1 using btree (year) TABLESPACE pg_default;

okr_objectives:
create table public.okr_objectives (
  id uuid not null default gen_random_uuid (),
  tenant_id uuid not null,
  brand_id uuid not null,
  title character varying(255) not null,
  description text null,
  target_value numeric(15, 2) not null,
  target_date_id integer not null,
  metric_type_id uuid not null,
  platform_id uuid null,
  granularity text not null default 'daily'::text,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  master_template_id uuid null,
  constraint okr_objectives_pkey primary key (id),
  constraint okr_objectives_master_template_id_fkey foreign KEY (master_template_id) references okr_master (id),
  constraint okr_objectives_metric_type_id_fkey foreign KEY (metric_type_id) references dim_metric_type (id),
  constraint okr_objectives_tenant_id_fkey foreign KEY (tenant_id) references tenants (id),
  constraint okr_objectives_brand_id_fkey foreign KEY (brand_id) references brands (id),
  constraint okr_objectives_platform_id_fkey foreign KEY (platform_id) references dim_platform (id),
  constraint okr_objectives_target_date_id_fkey foreign KEY (target_date_id) references dim_date (id),
  constraint okr_objectives_granularity_check check (
    (
      granularity = any (
        array['daily'::text, 'weekly'::text, 'monthly'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_okr_objectives_tenant_brand on public.okr_objectives using btree (tenant_id, brand_id) TABLESPACE pg_default;

create index IF not exists idx_okr_objectives_target_date_id on public.okr_objectives using btree (target_date_id) TABLESPACE pg_default;

create index IF not exists idx_okr_objectives_metric_type on public.okr_objectives using btree (metric_type_id) TABLESPACE pg_default;

create index IF not exists idx_okr_objectives_master_template on public.okr_objectives using btree (master_template_id) TABLESPACE pg_default;

ai_insights_v1:
create table public.ai_insights_v1 (
  id uuid not null default gen_random_uuid (),
  tenant_id uuid not null,
  brand_id uuid not null,
  date_id integer null,
  name character varying(50) not null,
  insight_type character varying(50) not null,
  insight_category character varying(50) not null,
  insight_title character varying(255) not null,
  insight_description text not null,
  platform public.platform_enum null,
  confidence_score numeric(3, 2) null,
  impact_score integer null,
  percentage_change numeric null,
  is_active boolean not null default true,
  created_at timestamp with time zone not null default now(),
  expires_at timestamp with time zone null,
  priority_display character varying null,
  trend_change_text character varying null,
  trend_direction numeric null default '1'::numeric,
  sort_order smallint null,
  constraint ai_insights_v1_pkey primary key (id),
  constraint ai_insights_v1_brand_fkey foreign KEY (brand_id) references brands (id),
  constraint ai_insights_v1_date_fkey foreign KEY (date_id) references dim_date_v1 (date_id),
  constraint ai_insights_v1_tenant_fkey foreign KEY (tenant_id) references tenants (id)
) TABLESPACE pg_default;

ai_recommended_actions_v1:
create table public.ai_recommended_actions_v1 (
  id uuid not null default gen_random_uuid (),
  insight_id uuid not null,
  action_text text not null,
  action_priority character varying(20) not null,
  action_description text null,
  stage character varying(30) not null default 'new'::character varying,
  viewed_at timestamp with time zone null,
  viewed_by uuid null,
  saved_at timestamp with time zone null,
  saved_by uuid null,
  actioned_at timestamp with time zone null,
  actioned_by uuid null,
  assigned_to_campaign_id uuid null,
  created_at timestamp with time zone not null default now(),
  okr_objective_id uuid null,
  action_confidence_score numeric(3, 2) null,
  action_impact_score integer null,
  constraint ai_recommended_actions_v1_pkey primary key (id),
  constraint ai_recommended_actions_v1_insight_fkey foreign KEY (insight_id) references ai_insights_v1 (id) on delete CASCADE,
  constraint ai_recommended_actions_v1_okr_objective_id_fkey foreign KEY (okr_objective_id) references okr_objectives (id),
  constraint ai_recommended_actions_v1_actioned_by_fkey foreign KEY (actioned_by) references auth.users (id),
  constraint ai_recommended_actions_v1_saved_by_fkey foreign KEY (saved_by) references auth.users (id),
  constraint ai_recommended_actions_v1_viewed_by_fkey foreign KEY (viewed_by) references auth.users (id),
  constraint ai_recommended_actions_v1_stage_check check (
    (
      (stage)::text = any (
        array[
          'new'::text,
          'viewed'::text,
          'saved'::text,
          'selected_for_action'::text,
          'in_progress'::text,
          'actioned'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;