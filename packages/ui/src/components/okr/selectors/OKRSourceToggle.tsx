"use client";

import * as React from "react";
import { Bot, Database, Zap, AlertTriangle } from "lucide-react";
import { cn } from "../../../lib/utils";
import { Label } from "../../ui/label";
import { Button } from "../../ui/button";
import { Card, CardContent } from "../../ui/card";
import { Badge } from "../../ui/badge";
import { Alert, AlertDescription } from "../../ui/alert";

export type OKRSourceType = 'ai' | 'database';

export interface OKRSourceToggleProps {
  value?: OKRSourceType;
  onValueChange?: (value: OKRSourceType) => void;
  disabled?: boolean;
  showDescription?: boolean;
  variant?: 'default' | 'compact' | 'cards';
  className?: string;
  aiServiceHealthy?: boolean;
  aiError?: string | null;
}

const sourceOptions: Array<{
  value: OKRSourceType;
  label: string;
  shortLabel: string;
  description: string;
  icon: React.ElementType;
  color: string;
  recommendation: string;
}> = [
  {
    value: 'ai',
    label: 'AI-Powered Suggestions',
    shortLabel: 'AI Suggestions',
    description: 'Get personalized OKR templates generated by AI based on your brand context',
    icon: Bot,
    color: 'bg-purple-100 text-purple-800 border-purple-200',
    recommendation: 'Recommended for personalized, context-aware OKR suggestions'
  },
  {
    value: 'database',
    label: 'Database Templates',
    shortLabel: 'Database OKRs',
    description: 'Use curated OKR templates from our comprehensive database',
    icon: Database,
    color: 'bg-blue-100 text-blue-800 border-blue-200',
    recommendation: 'Reliable fallback with proven OKR templates for your industry'
  }
];

export function OKRSourceToggle({
  value = 'ai',
  onValueChange,
  disabled = false,
  showDescription = true,
  variant = 'default',
  className,
  aiServiceHealthy = true,
  aiError = null
}: OKRSourceToggleProps) {
  const selectedOption = sourceOptions.find(option => option.value === value);
  
  // Auto-fallback to database if AI service is unhealthy
  React.useEffect(() => {
    if (!aiServiceHealthy && value === 'ai') {
      onValueChange?.('database');
    }
  }, [aiServiceHealthy, value, onValueChange]);

  const handleSelect = (source: OKRSourceType) => {
    if (disabled) return;
    
    // Prevent selecting AI if service is unhealthy
    if (source === 'ai' && !aiServiceHealthy) {
      return;
    }
    
    if (source === value) return;
    onValueChange?.(source);
  };

  const renderCompactVariant = () => (
    <div className={cn("space-y-2", className)}>
      <Label className="text-sm font-medium">OKR Source</Label>
      <div className="flex rounded-lg border p-1 bg-muted">
        {sourceOptions.map((option) => {
          const Icon = option.icon;
          const isSelected = value === option.value;
          const isAIUnavailable = option.value === 'ai' && !aiServiceHealthy;
          
          return (
            <button
              key={option.value}
              onClick={() => handleSelect(option.value)}
              disabled={disabled || isAIUnavailable}
              className={cn(
                "flex-1 flex items-center justify-center gap-1.5 px-3 py-1.5 text-xs font-medium rounded-md transition-all",
                isSelected
                  ? "bg-background text-foreground shadow-sm"
                  : "text-muted-foreground hover:text-foreground",
                (disabled || isAIUnavailable) && "opacity-50 cursor-not-allowed"
              )}
            >
              <Icon className="h-3 w-3" />
              {option.shortLabel}
              {isAIUnavailable && (
                <AlertTriangle className="h-3 w-3 text-amber-500" />
              )}
            </button>
          );
        })}
      </div>
      {!aiServiceHealthy && (
        <Alert>
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription className="text-xs">
            AI service is currently unavailable. Using database templates as fallback.
            {aiError && ` Error: ${aiError}`}
          </AlertDescription>
        </Alert>
      )}
      {showDescription && selectedOption && (
        <p className="text-xs text-muted-foreground">
          {selectedOption.description}
        </p>
      )}
    </div>
  );

  const renderCardsVariant = () => (
    <div className={cn("space-y-3", className)}>
      <div className="flex items-center justify-between">
        <Label className="text-sm font-medium">Choose OKR Source</Label>
        {!aiServiceHealthy && (
          <Badge variant="secondary" className="text-xs">
            <AlertTriangle className="h-3 w-3 mr-1" />
            AI Offline
          </Badge>
        )}
      </div>
      
      {!aiServiceHealthy && (
        <Alert>
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            AI service is temporarily unavailable. Database templates are being used as fallback.
            {aiError && ` (${aiError})`}
          </AlertDescription>
        </Alert>
      )}
      
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
        {sourceOptions.map((option) => {
          const Icon = option.icon;
          const isSelected = value === option.value;
          const isAIUnavailable = option.value === 'ai' && !aiServiceHealthy;
          
          return (
            <Card
              key={option.value}
              className={cn(
                "cursor-pointer transition-all hover:shadow-md",
                isSelected && "ring-2 ring-primary border-primary",
                (disabled || isAIUnavailable) && "opacity-50 cursor-not-allowed"
              )}
              onClick={() => handleSelect(option.value)}
            >
              <CardContent className="p-4">
                <div className="flex items-start gap-3">
                  <div className={cn(
                    "p-2 rounded-lg relative",
                    isSelected ? "bg-primary text-primary-foreground" : "bg-muted"
                  )}>
                    <Icon className="h-4 w-4" />
                    {isAIUnavailable && (
                      <AlertTriangle className="h-3 w-3 text-amber-500 absolute -top-1 -right-1" />
                    )}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="font-medium text-sm">{option.shortLabel}</h4>
                      {isSelected && (
                        <Badge variant="default" className="text-xs">Selected</Badge>
                      )}
                      {option.value === 'ai' && (
                        <Badge variant="secondary" className="text-xs">
                          <Zap className="h-2 w-2 mr-1" />
                          Smart
                        </Badge>
                      )}
                    </div>
                    {showDescription && (
                      <>
                        <p className="text-xs text-muted-foreground mb-2">
                          {option.description}
                        </p>
                        <p className="text-xs text-muted-foreground italic">
                          {option.recommendation}
                        </p>
                      </>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );

  const renderDefaultVariant = () => (
    <div className={cn("space-y-3", className)}>
      <div className="flex items-center justify-between">
        <Label className="text-sm font-medium">OKR Source</Label>
        {!aiServiceHealthy && (
          <Badge variant="destructive" className="text-xs">
            <AlertTriangle className="h-3 w-3 mr-1" />
            AI Service Offline
          </Badge>
        )}
      </div>
      
      {!aiServiceHealthy && (
        <Alert>
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            AI service is currently unavailable. Database templates are being used as fallback.
            {aiError && <span className="block mt-1 font-medium">Error: {aiError}</span>}
          </AlertDescription>
        </Alert>
      )}
      
      <div className="space-y-2">
        {sourceOptions.map((option) => {
          const Icon = option.icon;
          const isSelected = value === option.value;
          const isAIUnavailable = option.value === 'ai' && !aiServiceHealthy;
          
          return (
            <Button
              key={option.value}
              variant={isSelected ? "default" : "outline"}
              size="sm"
              onClick={() => handleSelect(option.value)}
              disabled={disabled || isAIUnavailable}
              className={cn(
                "w-full justify-start h-auto p-3 relative",
                !isSelected && "text-left"
              )}
            >
              <div className="flex items-center gap-3 w-full">
                <Icon className="h-4 w-4 shrink-0" />
                {isAIUnavailable && (
                  <AlertTriangle className="h-3 w-3 text-amber-500 shrink-0" />
                )}
                <div className="flex-1 min-w-0 text-left">
                  <div className="font-medium flex items-center gap-2">
                    {option.label}
                    {option.value === 'ai' && !isAIUnavailable && (
                      <Badge variant="secondary" className="text-xs">
                        <Zap className="h-2 w-2 mr-1" />
                        Smart
                      </Badge>
                    )}
                  </div>
                  {showDescription && (
                    <div className="text-xs opacity-75 mt-0.5">
                      {option.description}
                    </div>
                  )}
                </div>
                {isSelected && (
                  <Badge variant="secondary" className="text-xs">
                    Selected
                  </Badge>
                )}
              </div>
            </Button>
          );
        })}
      </div>
      
      {showDescription && selectedOption && (
        <div className="p-3 bg-muted rounded-lg">
          <p className="text-xs text-muted-foreground">
            <strong>Note:</strong> {selectedOption.recommendation}
          </p>
        </div>
      )}
    </div>
  );

  switch (variant) {
    case 'compact':
      return renderCompactVariant();
    case 'cards':
      return renderCardsVariant();
    default:
      return renderDefaultVariant();
  }
}

// Helper function to get source display info
export function getSourceInfo(source: OKRSourceType) {
  return sourceOptions.find(option => option.value === source);
}

// Skeleton component for loading states
export function OKRSourceToggleSkeleton({ 
  variant = 'default',
  className 
}: { 
  variant?: OKRSourceToggleProps['variant'];
  className?: string;
}) {
  if (variant === 'compact') {
    return (
      <div className={cn("space-y-2", className)}>
        <div className="h-4 w-20 bg-gray-200 rounded animate-pulse" />
        <div className="h-10 w-full bg-gray-200 rounded-lg border animate-pulse" />
        <div className="h-3 w-48 bg-gray-200 rounded animate-pulse" />
      </div>
    );
  }

  if (variant === 'cards') {
    return (
      <div className={cn("space-y-3", className)}>
        <div className="h-4 w-28 bg-gray-200 rounded animate-pulse" />
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          {Array.from({ length: 2 }).map((_, index) => (
            <div key={index} className="h-24 bg-gray-200 rounded-lg border animate-pulse" />
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className={cn("space-y-3", className)}>
      <div className="h-4 w-20 bg-gray-200 rounded animate-pulse" />
      <div className="space-y-2">
        {Array.from({ length: 2 }).map((_, index) => (
          <div key={index} className="h-12 w-full bg-gray-200 rounded border animate-pulse" />
        ))}
      </div>
      <div className="h-12 w-full bg-gray-200 rounded-lg animate-pulse" />
    </div>
  );
}