Tech Story Template for UI, Component & Hook Generation
1. User Story
As a [user persona: e.g., Marketing Manager, Startup Founder]
I want to [describe action clearly, e.g., track organic traffic trends by keyword]
So that I can [state business outcome, e.g., identify high-performing channels without extra ad spend]

2. Acceptance Criteria
Functional Requirements
 List the exact UI actions/features the system must support (click, drag, filter, save, share, etc.).

 State required API/data calls (e.g., fetch campaign metrics by date range).

 Define success state (e.g., chart renders within 2s).

Non-Functional Requirements
 Performance expectations (latency, load time, caching).

 Security (auth, access control).

 Scalability (expected user volume, data volume).

3. Technical Implementation
3.1 Data Flow
Describe how data moves:
Source → API → Database → Hook → Component → UI

3.2 State Management
What state lives in local (React state), global (Redux/Zustand), and server cache (React Query/SWR).

3.3 Database Schema Analysis
Current Schema Supports Requirements: [Yes/No + explanation]
Schema Changes Needed: [New tables/columns/relationships]

4. UI Components
4.1 Component Breakdown
<IndustrySelector />

<TemplateCard />

<CustomizationPanel />

<BulkActionBar />

4.2 Component Hierarchy

Page
 ├─ Header
 │   └─ IndustrySelector
 ├─ Grid
 │   └─ TemplateCard[]
 ├─ CustomizationPanel
 └─ BulkActionBar
5. Business Logic
Define computed values (e.g., engagement rate = comments + likes ÷ impressions).

Define bulk operations (e.g., select multiple templates → save to library).

6. Sample Queries

-- Fetch templates by industry
SELECT * FROM templates WHERE industry_id = $1;

-- Engagement metrics
SELECT template_id, SUM(likes) / SUM(impressions) AS engagement_rate
FROM social_metrics
WHERE date BETWEEN $1 AND $2
GROUP BY template_id;
7. Error Handling
7.1 Validation Errors
Invalid date range

Missing required field

7.2 System Errors
Supabase query timeout

API fetch error (retry with exponential backoff)

8. Success Metrics
Time-to-insight (e.g., < 3s load for dashboard)

User retention (% repeat visits for this feature)

Engagement (bulk save usage rate)

10. Technical Requirements - Next.js Implementation
10.1 Next.js Page
File Path: apps/web/app/workspace/<Module>/<SubModule>/page.tsx
Description: [Describe intended UI: e.g., dashboard grid with filterable templates + side customization panel]

10.2 React Components
<IndustrySelector /> — dropdown or search-based

<TemplateGrid /> — responsive grid

<TemplateCard /> — displays preview, metrics, actions

<CustomizationPanel /> — edit properties

<BulkActionBar /> — sticky save/export actions

10.3 Supabase Hooks
useTemplates(industryId, dateRange)

useSaveTemplate(templateId, customProps)

useBulkSave(templateIds[])

10.4 Responsive Design Requirements
Desktop (1280px+):
Three-column grid

Side drawer panel (400px)

Fixed bottom bulk bar

Tablet (768px - 1279px):
Two-column grid

Full-screen modal for customization

Sticky collapsed bulk bar

Mobile (<768px):
Single-column stack

Dropdown industry selector

Bottom sheet customization (60% height)

Floating action button for bulk save

10.5 Key UI Elements
Filters (industry, date)

Grid of template cards with metrics

Side/customization controls

Bulk action toolbar

10.6 Database Interaction Flow
UI → Hook → Supabase Query → DB → Hook returns data → Component renders UI